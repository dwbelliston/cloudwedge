"""
DashboardFactory

DashboardFactory receives a group of resources and builds a cloudformation
dashboard stack template with them.
"""
import hashlib
import json
import time
from os import environ
from typing import Dict, List

from resource_alarm_factory import ResourceAlarmFactory

from cloudwedge.models import AWSResource, AWSService
from cloudwedge.services import ServiceRegistry
from cloudwedge.utils.helpers import get_local_time
from cloudwedge.utils.logger import get_logger
from cloudwedge.utils.s3 import s3_save_object

PRIVATE_ASSETS_BUCKET = environ.get('PRIVATE_ASSETS_BUCKET')
PUBLIC_ASSETS_BUCKET = environ.get('PUBLIC_ASSETS_BUCKET')

ENVIRONMENT = environ.get('ENVIRONMENT')
REGION = environ.get('REGION')

LOGGER = get_logger("DashboardFactory")


class DashboardFactory():
    def __init__(self, session, owner, resources: Dict[str, List[AWSResource]]):
        LOGGER.info(f"üìäüè≠ DashboardFactory: {owner}")

        self.session = session
        # Owner of the resource
        self.owner = owner
        # Collection of resources, grouped by service
        self.resources = resources

        self.dashboard_name = f"cloudwedge-autogen-dashboard-{self.owner}"

        # Hold the templates that are created
        self.dashboard = {
            'stackName': f"cloudwedge-autogen-{self.owner}-dashboard-stack",
            's3TemplateKey': None,
            'template': {
                'AWSTemplateFormatVersion': "2010-09-09",
                'Description': f"CloudWedge Dashboard Stack for all resources that have owner {self.owner}. This stack is created dynamically by CloudWedge.",
                'Resources': {}
            }
        }

    def get_stack_details(self):
        """Return stack details"""

        return {
            'stackName': self.dashboard['stackName'],
            's3TemplateKey': self.dashboard['s3TemplateKey'],
            'stackType': 'dashboard',
            'stackOwner': self.owner
        }

    def build(self):
        """Build dashboard template for all the resources"""

        # Reset the template
        self.dashboard['template']['Resources'] = {}
        self.dashboard['s3TemplateKey'] = None

        # Collect dashboard widgets
        widgets = []

        # Build widgets for the front matter to the dashboard
        widgets_front_matter = self._build_frontmatter()
        widgets.extend(widgets_front_matter)

        # Build widgets for each resource in the service group
        for service_name, service_resources in self.resources.items():
            # Get the service class from the registry
            service = ServiceRegistry.get_service(service_name)

            LOGGER.info(f"üîß Building dashboard widgets for {service.name}")

            # Build json template for the resource
            widgets_service = service.build_dashboard_widgets(resources=service_resources)
            widgets.extend(widgets_service)

        # Build widgets for the back matter to the dashboard
        widgets_back_matter = self._build_backmatter()
        widgets.extend(widgets_back_matter)

        # Convert the widgets to string
        dashboard_body = json.dumps({
            'widgets': widgets
        })

        # Build the template resources using the string body
        template_resources = self._build_template_resources(dashboard_body)

        # Set the resources on the cloudformation template
        self.dashboard['template']['Resources'].update(template_resources)

        # Save the template to s3
        self._save_stack(self.dashboard)

    def _build_frontmatter(self):
        '''Build out the dashboard frontmatter for the instances'''

        stack_link = f'https://{REGION}.console.aws.amazon.com/cloudformation/home?region={REGION}#/stacks?filteringText=cloudwedge-autogen-{self.owner}'
        date_created = get_local_time().strftime('%b %d %I:%M %p')

        # Text widget for naming dashboard
        widgets = [
            {
                'type': 'text',
                'x': 0,
                'y': 0,
                'width': 12,
                'height': 2,
                'properties': {
                    'markdown': f'![img](https://{PUBLIC_ASSETS_BUCKET}.s3-{REGION}.amazonaws.com/public/cloudwedge/media/{ENVIRONMENT}/dashboard-frontmatter.png)'
                }
            },
            {
                'type': 'text',
                'x': 12,
                'y': 0,
                'width': 12,
                'height': 2,
                'properties': {
                    'markdown': (
                        f"[button: View {self.owner.capitalize()}'s CloudWedge Stacks ‚ÜóÔ∏è]({stack_link}) | [button: View CloudWedge Documentation ‚ÜóÔ∏è](http://cloudwedge.1strategy.com)\n"
                        f"#### ‚è± Dashboard was auto generated by CloudWedge at {date_created} \n"
                        f"#### üè∑ Resources are included based on tag configuration"
                    )
                }
            },
            {
                'type': 'text',
                'x': 0,
                'y': 3,
                'width': 24,
                'height': 1,
                'properties': {
                    # 'markdown': f'![img](https://{PUBLIC_ASSETS_BUCKET}.s3-{REGION}.amazonaws.com/cw-divider.png)'
                    'markdown': '---'
                }
            },
            {
                'type': 'text',
                'x': 0,
                'y': 4,
                'width': 24,
                'height': 1,
                'properties': {
                    'markdown': f'## ‚≠êÔ∏è {self.owner.capitalize()}'
                }
            }
        ]

        return widgets

    def _build_backmatter(self):
        '''Build out the dashboard backmatter for the instances'''

        topic_link = f'https://{REGION}.console.aws.amazon.com/sns/v3/home?region={REGION}#/topic/{AWSService.USER_TARGET_SNS}'

        # Text widget for naming dashboard
        widgets = [
            {
                'type': 'text',
                'width': 24,
                'height': 1,
                'properties': {
                    'markdown': '---'
                }
            },
            {
                'type': 'text',
                'width': 24,
                'height': 2,
                'properties': {
                    'markdown': (
                        f'#### [button: Subscribe to Notifications (Only in Hub Account) ‚ÜóÔ∏è]({topic_link})\n'
                        f'#### üí° Note: CloudWedge can send email and text notifications when alarms are breached. Make sure you subscribe to keep an eye on your resources.\n'
                        f'#### ‚úåÔ∏è CloudWedge was created by https://1Strategy.com. Reach out to us for support!'
                    )
                }
            }
        ]

        return widgets

    def _build_template_resources(self, dashboard_body: str):
        """Build the cloudformation template resources section"""

        resources = {
            'CloudWedgeDashboard': {
                'Type': 'AWS::CloudWatch::Dashboard',
                        'Properties': {
                            'DashboardName': self.dashboard_name,
                            'DashboardBody': dashboard_body
                        }
            }
        }

        return resources

    def _save_stack(self, stack):
        """Save the stack to s3 and return the key"""
        # Convert template to string
        s3_content = json.dumps(stack['template'])

        # Make s3 key for this stack
        s3_key = f'templates/{stack["stackName"]}/{int(time.time())}/template.json'

        # Save the template
        saved_key = s3_save_object(session=self.session, bucket=PRIVATE_ASSETS_BUCKET, key=s3_key,
                                   content=s3_content)

        self.dashboard['s3TemplateKey'] = saved_key
